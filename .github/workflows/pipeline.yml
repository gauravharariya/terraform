name: 'Terraform'
#testing1
on:
  push:
    branches: [ "terraform-testing" ]
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::472741099477:role/github-admin
        role-duration-seconds: 900 # the ttl of the session, in seconds.
        aws-region: us-west-2
    
    - name: Setup Terraform v1.2.6
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: 1.2.6
        terraform_wrapper: false

    - name: Setup Terraform version
      run: terraform --version
    - name: Setup Terraform wrapper path
      run: which terraform

    - name: Setup Terragrunt v0.38.4
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.38.4/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt -v

    # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terragrunt Init
      run: |
        pwd
        cd live
        ls -la
        terragrunt init --terragrunt-non-interactive


    # Generates an execution plan for Terragrunt
    - name: Terragrunt Plan
      run: |
        cd live 
        terragrunt run-all plan --terragrunt-non-interactive

      # On push to main, build or change infrastructure according to Terragrunt configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terragrunt Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terragrunt Apply
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd live
        terragrunt run-all apply --terragrunt-non-interactive


    #  # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
    # - name: Install Terraform
    #   run: |
    #     wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
    #     echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
    #     sudo apt update && sudo apt install terraform
    # # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
   
    # - name: configure aws credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     role-to-assume: arn:aws:iam::472741099477:role/github-admin
    #     role-duration-seconds: 900 # the ttl of the session, in seconds.
    #     aws-region: us-west-2


    # # - name: Terraform Format
    # #   run: terraform fmt -check

    # - name: Terraform Init
    #   run: terraform init

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan -var-file=var-temp.tfvars.json

    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   run: terraform apply -auto-approve -var-file=var-temp.tfvars.json